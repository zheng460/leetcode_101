class SparseVector {

    Map<Integer, Integer> indexToValue = new HashMap<>();
    
    SparseVector(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                indexToValue.put(i, nums[i]);
            }
        }
    }
    
	// Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        if (indexToValue.size() == 0 || vec.indexToValue.size() == 0) {
            return 0;
        }

        // optimal
        if (vec.indexToValue.size() < indexToValue.size()) {
            return vec.dotProduct(this);
        }

        int dotProduct = 0;
        for (Integer index : indexToValue.keySet()) {
            Integer vecValue = vec.indexToValue.get(index);
            if (vecValue != null) {
                dotProduct += indexToValue.get(index) * vecValue;
            }
        }

        return dotProduct;
    }
}

// Your SparseVector object will be instantiated and called as such:
// SparseVector v1 = new SparseVector(nums1);
// SparseVector v2 = new SparseVector(nums2);
// int ans = v1.dotProduct(v2);
